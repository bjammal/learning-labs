
source "azure-arm" "autogenerated_1" {
  communicator                      = "winrm"
  image_offer                       = "WindowsServer"
  image_publisher                   = "MicrosoftWindowsServer"
  image_sku                         = "2019-Datacenter"
  location                          = "East US"
  managed_image_name                = "BilalPackerWindowsOSImage"
  managed_image_resource_group_name = "bilal-packer-rg"
  os_type                           = "Windows"
  use_azure_cli_auth                = true
  vm_size                           = "Standard_D2_v2"
  winrm_insecure                    = true
  winrm_timeout                     = "5m"
  winrm_use_ssl                     = true
  winrm_username                    = "packer"
}

build {
  sources = ["source.azure-arm.autogenerated_1"]

  provisioner "powershell" {
    script = "../../ansible/scripts/ConfigureRemotingForAnsible.ps1"
  }

  provisioner "ansible" {
    ansible_env_vars =[ 
      "ANSIBLE_HOST_KEY_CHECKING=False", 
      "no_proxy=\"*\"" 
    ]
    user = "packer"
    use_proxy = false
    extra_arguments = [
      "-e", "ansible_winrm_server_cert_validation=ignore",
    ]
    playbook_file = "../../ansible/windows.yml"
  }

  provisioner "powershell" {
      inline = [
        " # NOTE: the following *3* lines are only needed if the you have installed the Guest Agent.",
        "  while ((Get-Service RdAgent).Status -ne 'Running') { Start-Sleep -s 5 }",
        "  while ((Get-Service WindowsAzureTelemetryService).Status -ne 'Running') { Start-Sleep -s 5 }",
        "  while ((Get-Service WindowsAzureGuestAgent).Status -ne 'Running') { Start-Sleep -s 5 }",
        
        //"if( Test-Path $Env:SystemRoot\\windows\\system32\\Sysprep\\unattend.xml ){ rm $Env:SystemRoot\\windows\\system32\\Sysprep\\unattend.xml -Force}",
        "& $env:SystemRoot\\System32\\Sysprep\\Sysprep.exe /oobe /generalize /quiet /quit /mode:vm",
        "while($true) { $imageState = Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Setup\\State | Select ImageState; if($imageState.ImageState -ne 'IMAGE_STATE_GENERALIZE_RESEAL_TO_OOBE') { Write-Output $imageState.ImageState; Start-Sleep -s 10  } else { break } }"
    ]
  }
}
